//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 
//   Authors: Dave uRrr, Material, Fandirus, DeathCream
//   Version: 
//   Purpose: sub Scruct for SOBJ.bt
//  Category: 
// File Mask: SOBJ.bt
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// cEmSetter
//------------------------------------------------
typedef struct {
    float   mMulScale;
    float   mArrivalRadius;
    int32   unkn1;
    uint32  mEmID;
    uint32  mEmSubID;
    mDesireList Desire;
    mTargetGroupIDList TargetGroupID;
    mRepopSetList RepopSet;
    Custom mprThinkTableList;
    Custom mprFSM;
    Custom mprMotionList;
    uint32  unkn2;
    int32   FFFF1;
    int32   unkn15; //if FFFF=FFFF 2 in arenas, 0 Rath
    byte    NUL3;
    mProps  ZakoProps;
    mPosData PosData;
    mOverrideTraceData OverRideTraceData;
    uint32  NUL4[3];

    local string s; SPrintf(s, "mEmID: %d", mEmID);
} cEmSetter;

//------------------------------------------------
// cEmGroupSetter
//------------------------------------------------
typedef struct {
    long    unkn2;
    long    unkn3;
    float   unkn4;
    float   unkn5;
    float   unkn6;
    long    unkn7;
    float   unkn8;
    nEmGroupMemberInfo EmInfo;
    mTargetGroupIDList TargetGroupID;
    mDesireList Desire;
    mRepopSetList RepopSet;
    uint32  unkn9;
    long    FFFF1;
    long    unkn15;
    char    NUL3;
    if(NUL3 == -1) {uint32 NUL5;}
    mProps  ZakoProps;
    uint32  NUL4[3];

    local string s; SPrintf(s, "Count: %d", EmInfo.count);
} cEmGroupSetter;

//------------------------------------------------
// cLifeSimDesireTargetForSetData
//------------------------------------------------
typedef struct {
    uint32  mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32  mDesireID;
    Vector3 mPos<bgcolor=0x00FF00,read=ReadVector3>;
    Vector3 mActionPos<bgcolor=0x0AA00,read=ReadVector3>;
    int32   mActionID;
    uint32  NULL[3];
} cLifeSimDesireTargetForSetData;

//------------------------------------------------
// cLifeSimDesireTargetForSetData
//------------------------------------------------
typedef struct {
    uint32 count;
    cLifeSimDesireTargetForSetData setData[count]<bgcolor=0xAAAAAA,read=ReadDesireList,optimize=false>;
} mDesireTargetList;

//------------------------------------------------
// cEmDesireSetter
//------------------------------------------------
typedef struct {
    mDesireTargetList targetList;
    local string s; SPrintf(s, "Count: %d", targetList.count);
} cEmDesireSetter;

//------------------------------------------------
// cEmRepopSetter
//------------------------------------------------
typedef struct {
    uint32  mEnumCRC<bgcolor=0x000000,format=hex>;
    Vector3 mPos<bgcolor=0x00FF00,read=ReadVector3>;
    float   unkn0[7]<optimize=false>;
    uint32  unkn1;
    byte    NULL;
} cEmRepopPointForSetData;

//------------------------------------------------
// cEmRepopSetter
//------------------------------------------------
typedef struct {
    uint32 count;
    cEmRepopPointForSetData setData[count]<bgcolor=0xAAAAAA,read=ReadRepopList,optimize=false>;
} mRepopPointList;

//------------------------------------------------
// cEmRepopSetter
//------------------------------------------------
typedef struct {
    mRepopPointList pointList;
    local string s; SPrintf(s, "Count: %d", pointList.count);
} cEmRepopSetter;

//------------------------------------------------
// Display
//------------------------------------------------
string ReadDesireList(cLifeSimDesireTargetForSetData& r) {
    string s;
    SPrintf(s, "ID: %d \t Action: %d \t mPos[x: %f \t y: %f \t z: %f] \t mActionPos[x: %f \t y: %f \t z: %f]",
        r.mDesireID, r.mActionID, r.mPos.x, r.mPos.y, r.mPos.z, r.mActionPos.x, r.mActionPos.y, r.mActionPos.z);
    return s;
}

string ReadRepopList(cEmRepopPointForSetData& r) {
    string s;
    SPrintf(s, "mPos[x: %f \t y: %d \t z: %d]", r.mPos.x, r.mPos.y, r.mPos.z);
    return s;
}

string ReadEmSetter(cEmSetter& r) {
    string s;
    SPrintf(s, "mEmID: %d", r.mEmID);
    return s;
}

string ReadEmGroup(cEmGroupSetter& r) {
    string s;
    SPrintf(s, "Count: %d", r.EmInfo.count);
    return s;
}

string ReadDesireSetter(cEmDesireSetter& r) {
    string s;
    SPrintf(s, "Count: %d", r.targetList.count);
    return s;
}

string ReadRepopSetter(cEmRepopSetter& r) {
    string s;
    SPrintf(s, "Count: %d", r.pointList.count);
    return s;
}
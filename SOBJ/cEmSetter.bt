//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 
//   Authors: Dave uRrr, Material, Fandirus, DeathCream
//   Version: 
//   Purpose: sub Scruct for SOBJ.bt
//  Category: 
// File Mask: SOBJ.bt
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// THKPaths by Asterisk
typedef struct{
    long structureHash;
    if (structureHash) string path; 
}structurePath;

//------------------------------------------------
// [EM] Boss Data
typedef struct {
    float   Size<name="Monster Size">;
    float   unkn3;
    long    unkn4;
    long    mID<bgcolor=0x800080,name="Monster ID">;
    long    Mode<bgcolor=0xFF0000,name="Monster Mode">;
    uint32  fCnt<name="[AIFSM] Count">;
    if (fCnt > 0) {Uunkn uunkn[fCnt]<read=ReadUunkn,name="[AIFSM] Data",optimize=false>;} //cEmGroupSetter
    //uint32  six1; //Pre IB
    uint32  six2;
    Six six[six2]<read=ReadSix,name="Unknown SIX">; //cEmGroupSetter
    long    uCnt<name="AIFSM Bool??">;

    structurePath callableStructures[4]<optimize=false>;

    long    FFFF1;
    long    unkn15; //if FFFF=FFFF 2 in arenas, 0 Rath
    char    NUL3;
    long    sCnt<bgcolor=0x0000ff,name="[Zako] Count">;
    if (sCnt > 0) {ZakoSpawn zakospawn[sCnt]<read=ReadZako,name="[Zako] Spawn",optimize=false>;} //cEmGroupSetter
    uint32  lCnt<bgcolor=0x0000ff,name="[Boss] Count">;
    if (lCnt > 0) {BossSpawn bossspawn[lCnt]<read=ReadSetTrace,name="[Boss] Spawn",optimize=false>;}
    long  TraceBool<bgcolor=0x0000ff,name="Trace Bool">;
    if (TraceBool == 1) {TraceSet ts<read=ReadSetTrace,name="Trace">;}
    uint32  NUL4[3];
} EM;

//------------------------------------------------
// [EMGroup] Zako Data
typedef struct {
    long    unkn2;
    long    unkn3;
    float   unkn4;
    float   unkn5;
    float   unkn6;
    long    unkn7;
    float   unkn8;
    uint32  fCnt;
    if (fCnt > 0) {
        AIFSM aifsm[fCnt]<name="[AIFSM] Count",optimize=false>;
        //long IBAITHK;
        //if(IBAITHK != 0){THKAIFSM thkaifsm;}
        //else{uint32 unkn9[2];}
    }
    //uint32  six1;
    uint32  six2;
    Six six[six2]<read=ReadSix,name="Unknown SIX">; //cEmGroupSetter
    long    uCnt;
    if (uCnt > 0) {Uunkn uunkn[uCnt]<name="[AIFSM] Data",optimize=false>;} //cEmGroupSetter
    long    unkn13;
    if (unkn13 > 0) {Uunkn2 uunkn2[unkn13]<name="[AIFSM] Data",optimize=false>;} //cEmGroupSetter 
    long    FFFF1;
    long    unkn15;
    char    NUL3;
    if(NUL3 == -1) {uint32 NUL5;}
    long    sCnt<bgcolor=0x0000ff,name="Zako Count">;
    if (sCnt > 0) {ZakoSpawn zakospawn[sCnt]<read=ReadZako,name="[Zako] Spawn",optimize=false>;} //cEmGroupSetter
    else{ZakoSpawn zakospawn<read=ReadZako,name="[Zako] Spawn",optimize=false>;}
    uint32  NUL4[3];
} EMGroup;

//------------------------------------------------
// [EMDesire] Loop Structs
typedef struct {
    long    IBsignature;
    long    CoordType<bgcolor=0xff0000,name="Coord Type">;
    float   aPos_X<bgcolor=0x00ff00,name="Point A    X">;
    float   aPos_Y<bgcolor=0x00ff00,name="Point A    Y">;
    float   aPos_Z<bgcolor=0x00ff00,name="Point A    Z">;
    float   bPos_X<bgcolor=0x00ff00,name="Point B   X">;
    float   bPos_Y<bgcolor=0x00ff00,name="Point B   Y">;
    float   bPos_Z<bgcolor=0x00ff00,name="Point B   Z">;
    long    Action<bgcolor=0xff0000,name="Action">;
    uint32  unkn[3]<bgcolor=0xff0000>;
} Route;

//------------------------------------------------
// [EMDesire] Loop Structs
typedef struct {
    long    IBsignature;
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   unkn5<bgcolor=0x00ff00>;
    float   unkn6<bgcolor=0x00ff00>;
    float   unkn7<bgcolor=0x00ff00>;
    float   unkn8<bgcolor=0x00ff00>;
    float   unkn9<bgcolor=0x00ff00>;
    float   unkn10<bgcolor=0x00ff00>;
    float   unkn11<bgcolor=0x00ff00>;
    uint32  unkn12<bgcolor=0x000000>;
    byte    NULL<bgcolor=0x000000>;
} Repop;

//------------------------------------------------
// [EMDesire]
typedef struct {
    uint32  cCnt<bgcolor=0x0000ff,name="Coordinate Count">;
    if (cType == "cEmDesireSetter"){Route r[cCnt]<read=ReadRoute,name="Route Coordinates",optimize=false>;}
    if (cType == "cEmRepopSetter"){Repop p[cCnt]<read=ReadRepop,name="Repop Coordinates",optimize=false>;}
} EMDesire;


string ReadRoute(Route& r) {
    string s;
    SPrintf(s, "Action: %d \t A[X: %f \t Y: %f \t Z: %f] \t B[X: %f \t Y: %f \t Z: %f]", 
            r.Action, r.aPos_X, r.aPos_Y, r.aPos_Z, r.bPos_X, r.bPos_Y, r.bPos_Z);
    return s;
}

string ReadRepop(Repop& r) {
    string s;
    SPrintf(s, "[X: %f \t Y: %f \t Z: %f]", r.Pos_X, r.Pos_Y, r.Pos_Z);
    return s;
}
//------------------------------------------------
//--- 010 Editor v10.0.1 Binary Template
//
//      File: 
//   Authors: Dave uRrr
//   Version: 
//   Purpose: sub Scruct for SOBJ.bt
//  Category: 
// File Mask: SOBJ.bt
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// mSetInfo
//------------------------------------------------
typedef struct {
    Vector3 mPos<bgcolor=0x00FF00,read=ReadVector3>;
    Vector3 mAngle<bgcolor=0x00AA00,read=ReadVector3>;
} mSetInfo; 

//------------------------------------------------
// nOtomo::ActiveAreaSetInfo
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    Vector3 mCenter<bgcolor=0x00FF00,read=ReadVector3>;
    float   mRadius; // Needs to be reviewed
    float   mHeight;
    float   mSensingRadius;
    float   mSensingHeight;
    uint32  mAttr;
    Vector3 mSubPosition<bgcolor=0x00FF00,read=ReadVector3>;
    uint32  mEnableStoryNo;
    uint32  mMemberNum;
    mSetInfo setInfo[mMemberNum]<read=ReadSetInfo,optimize=false>;
} ActiveAreaSetInfo;

//------------------------------------------------
// cOtRandomSetter
//------------------------------------------------
typedef struct {
    uint32 count;
    ActiveAreaSetInfo mActiveAreas[count]<optimize=false>; // mActiveAreas
    uint32  NULL;
    local string s;
    SPrintf(s, "mActiveAreas: %d", count);
} cOtRandomSetter;

//------------------------------------------------
// nOtomo::OtasukeAreaSetInfo
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    Vector3 mCenter<bgcolor=0x00FF00,read=ReadVector3>;
    float   mRadius; // Needs to be reviewed
    float   mHeight;
    float   mSensingRadius;
    float   mSensingHeight;
    uint32  mAttr;
    Vector3 mSubPosition<bgcolor=0x00FF00,read=ReadVector3>;
    uint32  mEnableStoryNo;
    mSetInfo mLeaderSetInfo<read=ReadSetInfo>;
    mSetInfo mLeaderExitInfo<read=ReadSetInfo>;
    mSetInfo mIvyCenterSetInfo<read=ReadSetInfo>;
    mSetInfo mSubSetInfo[10]<read=ReadSetInfo,optimize=false>;
    mSetInfo mYetiSetInfo[20]<read=ReadSetInfo,optimize=false>;
} OtasukeAreaSetInfo;

//------------------------------------------------
// cOtOtasukeSetter
//------------------------------------------------
typedef struct {
    uint32 count;
    OtasukeAreaSetInfo mActiveAreas[count]<optimize=false>; // mActiveAreas
    local string s;
    SPrintf(s, "mActiveAreas: %d", count);
} cOtOtasukeSetter;

//------------------------------------------------
// nOtomo::MemberSetInfo
//------------------------------------------------
typedef struct {
    int32 mEnumCRC<bgcolor=0x000000,format=hex>;
    mSetInfo setInfo<read=ReadSetInfo>;
} MemberSetInfo;

//------------------------------------------------
// nOtomo::MemberSetInfo
//------------------------------------------------
typedef struct {
    uint32 count;
    MemberSetInfo memberInfo[count]<read=ReadMemberInfo,optimize=false>;  
} mMembers;

//------------------------------------------------
// cOtGroupSetter
//------------------------------------------------
typedef struct {
    uint32  mKind;
    uint32  mLifeType;
    float   mRadius;
    float   mHeight;
    float   unkn0[2];
    uint64  unkn6[2];
    float   mSensingRadius;
    float   mSensingHeight;
    float   unkn7[2];
    mMembers members;
    local string s;
    SPrintf(s, "mKind: %d \t mLifeType: %d", mKind, mLifeType);
} cOtGroupSetter;

//------------------------------------------------
// cOtGroupSetter
//------------------------------------------------
typedef struct {
    uint32 mPosType;
    local string s;
    SPrintf(s, "mPosType: %d", mPosType);
} cOtPosSetter;

//------------------------------------------------
// Display
//------------------------------------------------
string ReadSetInfo(mSetInfo& r) {
    string s;
    SPrintf(s, "x: %f \t y: %f \t z: %f", r.mPos.x, r.mPos.y, r.mPos.z);
    return s;
}

string ReadMemberInfo(MemberSetInfo& r) {
    string s;
    SPrintf(s, "x: %f \t y: %f \t z: %f", r.setInfo.mPos.x, r.setInfo.mPos.y, r.setInfo.mPos.z);
    return s;
}

string ReadOtGroup(cOtGroupSetter& r) {
    string s;
    SPrintf(s, "mKind: %d \t mLifeType: %d", r.mKind, r.mLifeType);
    return s;
}

string ReadRandom(cOtRandomSetter& r) {
    string s;
    SPrintf(s, "mActiveAreas: %d", r.count);
    return s;
}

string ReadOtasuke(cOtOtasukeSetter& r) {
    string s;
    SPrintf(s, "mActiveAreas: %d", r.count);
    return s;
}

string ReadOtPos(cOtPosSetter& r) {
    string s;
    SPrintf(s, "mPosType: %d", r.mPosType);
    return s;
}
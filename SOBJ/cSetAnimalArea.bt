//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 
//   Authors: Dave uRrr
//   Version: 
//   Purpose: sub Scruct for SOBJ.bt
//  Category: 
// File Mask: SOBJ.bt
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// [SetAnimalArea]
typedef struct {
    //byte    IBGarbage[3];
    uint32  ID<name="Animal ID">;
    uint32  subID<name="Sub Variant ID">;
    uint32  Magic1;
    uint32  Magic2;
    float   unkn2;
    Radii   radii<name="Radii Setup">;
    char    SOH1;
    uint32  NUL11;
    uint32  aCnt<name="Animal Count",bgcolor=0x0000ff>;
    if (aCnt > 0) {AnimalConfig animalconfig[aCnt]<name="Animal Configuration",optimize=false>;}
    uint32  Magic3;
    if (Magic3 > 0) {AnimalUnkn1 animalunkn1[Magic3]<name="Animal AI???",optimize=false>;}
    byte    rBool<name="Rarity Bool">;
    uint32  rSize;
    if (rBool == 1) {
        uint32  rCnt<name="Rarity Count">;
        Rarity rarity[rCnt]<read=ReadRarity,name="Rarity Configuration",optimize=false>;
    }
    else{
        if (rSize > 0){
            uint32  rCnt<name="Rarity Count">;
            Rarity rarity[rCnt]<read=ReadRarity,name="Rarity Configuration",optimize=false>;
        }
    }
    //IB needs to be 12 bytes total with now extra bytes, -3 because of the bool being uint32 from byte.
    uint32  Size;
    if (Size > 0) {
        uint32  sCnt;
        if (sCnt > 0) {IBstruct ibs[sCnt]<name="Unkn IB Struct",optimize=false>;}
    }
    byte    unkn4;
    short   unkn5;
    short   unkn6;
} AnimalArea;
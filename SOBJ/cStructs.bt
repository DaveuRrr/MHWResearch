//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 
//   Authors: Dave uRrr
//   Version: 
//   Purpose: Adds all the mini structs needed for the bigger ones
//  Category: 
// File Mask: SOBJ.bt
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
// Spawn
typedef struct {
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   Rot_X<bgcolor=0x00ff00,name="Rotation   X">;
    float   Rot_Y<bgcolor=0x00ff00,name="Rotation   Y">;
    float   Rot_Z<bgcolor=0x00ff00,name="Rotation   Z">;
    float   Spn_X<bgcolor=0x00ff00,name="Spawn      X">;
    float   Spn_Y<bgcolor=0x00ff00,name="Spawn      Y">;
    float   Spn_Z<bgcolor=0x00ff00,name="Spawn      Z">;
    local string s;
    SPrintf(s, "[pX: %f \t pY: %f \t pZ: %f] \t [rX: %f \t rY: %f \t rZ: %f]", 
                Pos_X, Pos_Y, Pos_Z, Rot_X, Rot_Y, Rot_Z);
} Spawn;

//------------------------------------------------
// OddStruct
typedef struct {
    byte    SOH1;
    byte    unkn0;
    byte    unkn1;
    byte    unkn2;
    byte    unkn3;
    if(cType == "cAssetBasicSetObject") {byte    unkn4[28];}
    else {byte  unkn4[13];}
    long    EOT1;
} oStruct;

//------------------------------------------------
// NPC Camera
typedef struct {
    float   Pos_X<bgcolor=0x00ff00,name="Position   X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position   Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position   Z">;
    uint32  NUL0<name="NULL">;
    float   Rot_X<bgcolor=0x00ff00,name="Rotation  X">;
    float   Rot_Y<bgcolor=0x00ff00,name="Rotation  Y">;
    float   Rot_Z<bgcolor=0x00ff00,name="Rotation  Z">;
    uint32  NUL1[3]<name="NULL">;
    float   Spn_X<bgcolor=0x00ff00,name="Spawn     X">;
    float   Spn_Y<bgcolor=0x00ff00,name="Spawn     Y">;
    float   Spn_Z<bgcolor=0x00ff00,name="Spawn     Z">;
    float   unkn8;
} Camera;

//------------------------------------------------
// Parameter Data Types
typedef struct {
    byte    bool<bgcolor=0xff0000>;
} dBool;        //dType = 3

typedef struct {
    int32   value<bgcolor=0xff0000,name="Value">;
} dInt32;       //dType - 4

typedef struct {
    float   draw<bgcolor=0x00ff00,name="Draw Distance">;
} dFloat;       //dType = 6

typedef struct {
    float   Pos_X<bgcolor=0x00ff00,name="Position   X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position   Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position   Z">;
    uint32  NUL<hidden=true>;
} dVector4;     //dType = 8

typedef struct {
    dVector4    dvector4[4]<read=ReadVector4,name="Matrix 4x4",optimize=false>;
} dMatrix4X4;    //dType = 9

typedef struct {
    byte    NUL0<hidden=true>;
    uint32  value<bgcolor=0xff0000,name="Value">;
    byte    NUL1<hidden=true>;
} dClass;       //dType =13

//------------------------------------------------
// Parameters
typedef struct {
    uint32  dType<name="Data Type">;
    switch(dType) {
        case 3  : dBool         dbool<read=ReadBool,name="Bool">;           break;
        case 4  : dInt32        dint32<read=ReadInt32,name="Int32">;        break;
        case 6  : dFloat        dfloatM<read=ReadFloat32,name="Float">;     break;
        case 8  : dVector4      dvector4<read=ReadVector,name="Vector4">;   break;
        case 9  : dMatrix4X4    dmatrix4x4<name="Matrix 4x4">;               break;
        case 13 : dClass        dclass<read=ReadClass,name="Class">;        break;
    }
    string  PRM<bgcolor=0x800080,name="Parameter">;
    uint32  DTypev<bgcolor=0xff0000,name="Data Type ID">;
    string  DTypes<bgcolor=0x800080,name="Data Type String">;
    uint32  class<bgcolor=0xff0000,name="Value/Class">;
    byte    SOH[9]<hidden=true>;
} Parameters;

//------------------------------------------------
// Gimmick
typedef struct {
    string  cmd;
    uint32  fCnt;
    float   unkn2[fCnt];
} GM;

//------------------------------------------------
// [SetAnimalArea] Radii
typedef struct {
    char    NUL4<hidden=true>;
    float   Range<name="Range",bgcolor=0x00ffff>; 
    float   Set_Y<name="Set Height",bgcolor=0x00ffff>;
    local int i<hidden=true>;
    for (i = 0; i < 5; ++i) {
        float   Radii_X<name="Radii         X \t",bgcolor=0x00ffff>;
        float   Radii_Y<name="Radii         Y \t",bgcolor=0x00ffff>;
        float   Radii_Z<name="Radii         Z \t",bgcolor=0x00ffff>;
        uint32  NUL6<name="...............">;
    }
} Radii;

//------------------------------------------------
// [SetAnimalArea] Spawn Config
typedef struct {
    long    IBsignature;
    local int i<hidden=true>;
    for(i = 0; i < 12; i++){float   unkn<optimize=false>;}
    float   Pos_X<name="Position   X",bgcolor=0x00ff00>;
    float   Pos_Y<name="Position   Y",bgcolor=0x00ff00>;
    float   Pos_Z<name="Position   Z",bgcolor=0x00ff00>;
    float   unkn;
    long    IBFFFF;
} AnimalConfig;

//------------------------------------------------
// [SetAnimalArea] Unknown
typedef struct {
    long    SOH;
    uint32  unkn3;
    uint32  unkn4;
    float   Pos_X<name="Position   X",bgcolor=0x00ff00>;
    float   Pos_Y<name="Position   Y",bgcolor=0x00ff00>;
    float   Pos_Z<name="Position   Z",bgcolor=0x00ff00>;
    float   unkn7;
    float   unkn8;
    float   unkn9;
    long    IBFFFF;
} AnimalUnkn1;

//------------------------------------------------
// [SetAnimalArea] Rarity
typedef struct {
    long    IBsignature;
    uint32  aCnt<name="Rarity Count">;
    float   rarity<name="Spawn Rate">;
    byte    unkn1;
    byte    unkn2;
} Rarity;

//------------------------------------------------
// [SetAnimalArea] New IB struct
typedef struct {
    long    IBsignature;
    uint32  unkn1;
    float   unkn2;
    uint64  unkn3;
    short   unkn4;
    float   unkn5;
    float   unkn6;
} IBstruct;

//------------------------------------------------
// [SetFishArea] New IB struct
typedef struct {
    long    IBsignature;
    uint32  unkn0;
    float   unkn1;
    short   unkn2;
} IBFstruct;

//------------------------------------------------
// [SetFishArea] FishConfig
typedef struct {
    long    IBsignature;
    uint32  fID<name="Great Fish ID">;
    local float unknf<hidden=true>;
    uint32  version<name="Version">;
    uint32  fCnt<bgcolor=0x80080,name="Fish Count">;
    uint32  unkn1;

    // This breaks on st102_ec
    byte    rBool<name="Rarity Bool">;
    uint32  Size;
    if (rBool == 1) {
        uint32  rCnt<bgcolor=0x0000ff,name="Rarity Count">;
        Rarity rarity[rCnt]<read=ReadRarity,name="Rarity Configuration",optimize=false>;
    }
    else{
        if (Size > 0) {
            uint32  sCnt;
            if (sCnt > 0) {IBFstruct ibfs[sCnt]<name="Unkn IB Struct",optimize=false>;}
        }
    }
    // This breaks on st102_ec


    //IB stuff
    uint32  unkn3;
    if (unkn3 > 0) {
        uint32  sCnt;
        if (sCnt > 0) {IBstruct ibs[sCnt]<name="Unkn IB Struct",optimize=false>;}
    }
    //IB Stuff

    byte    SOH2;
    if (SOH2 == 0) {}
    else{
        float   Spawn0;
        if (Spawn0 == 1) {
            Radii radii<name="Fish Radii">;
            uint32  SOH3;
            byte    NULL;
        }
        else {
            float   Spawn1;
            short   unkn6;
            char    SOH3;
            float   Spawn2;
            Radii radii<name="Fish Radii">;
        }
    }
} FishConfig;

//------------------------------------------------
// [SetFishArea] Radii
typedef struct {
    char    SOH;
    if (SOH ==0) {FSkip(-1);}
    else {uint32  unkn0;}
    float   unkn1;
    if (unkn1 == 0) {uint32  NUL;}
    else{Radii radii<name="Fish Radii">;}
    char    SOH1;
    uint64  NUL1;
} FishRadii;

//------------------------------------------------
// [SetFishArea] Coordinates
typedef struct {
    long    IBsignature;
    local int i<hidden=true>;
    for (i = 0; i < 8 ; ++i) {float   unkn;}
    long    IBunkn;
} FishCoord;

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    IBsignature;
    long    IDcount;
    long    unkn1;
    long    unkn2;
    long    unkn3;
    long    unkn4;
} Uunkn; //AIFSM

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    IBsignature;
    long    unkn0;
    long    unkn1;
    long    unkn2;
    long    unkn3;
} Uunkn2; //AIFSM

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    ID;
    float   unkn1;
    float   unkn2;
} Six;

//------------------------------------------------
// [cEmGroupSetter] Loop Structs
typedef struct {
    long    IBSignature;
    uint32  unkn0<bgcolor=0xff0000>;
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   Rot_X<bgcolor=0x00ff00,name="Rotation   X">;
    float   Rot_Y<bgcolor=0x00ff00,name="Rotation   Y">;
    float   Rot_Z<bgcolor=0x00ff00,name="Rotation   Z">;
    float   Spn_X<bgcolor=0x00ff00,name="Spawn">;
    long    AI<bgcolor=0x800080,name="Read AIFSM">;
    string  aPath<bgcolor=0x800080,name="Path">;
    if (AI != 0) {
       long    Thk<bgcolor=0x80080>;
       string    tPath<bgcolor=0x800080,name="Path">;
    }
    //if (AI != 0) {string    aPath<bgcolor=0x800080,name="Path">;}
    uint64  NUL0;

    //if (Thk != 0) {string    tPath<bgcolor=0x800080,name="Path">;}
    uint32  variant<bgcolor=0xff0000,name="Status / Variant">;
    string    zako<bgcolor=0x800080>;
    byte    unkn1[3];
} AIFSM;

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    long    SOH;
    //This IF might need to be removed or seperated only for EMS files
    if (SOH == 0) {
        char    Thk[]<bgcolor=0x800080,name="Think Table">;
        if (Thk != ""){char    path[]<bgcolor=0x800080,name="Path">;}
        char    AI[]<bgcolor=0x800080,name="Read AIFSM">;
        if (AI != "") {char    aPath[]<bgcolor=0x800080,name="Path">;}
        byte    NUL[5];
    }
    //cEmSetter only I believe
    else {
        long    unkn1;
        long    unkn2;
        if (unkn2 == 0){byte NULL;}
        uint32  unkn3;
        uint32  unkn4;
        if(unkn4 != 0){byte    NUL0;}
        long    AI<bgcolor=0x800080,name="Read AIFSM">;
        if (AI != 0) {string    aPath<bgcolor=0x800080,name="Path">;}
        //byte    NUL[4];
    }
} ThinkTable;

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
        char    Thk[]<bgcolor=0x800080,name="Think Table">;
        if (Thk != ""){char    path[]<bgcolor=0x800080,name="Path">;}
        char    AI[]<bgcolor=0x800080,name="Read AIFSM">;
        if (AI != "") {char    aPath[]<bgcolor=0x800080,name="Path">;}
        byte    NUL;    //DeathCream noticed it was a byte + long
        long    unkn;
} THKAIFSM;

//------------------------------------------------
// [cEmSetter] Zako Spawn
typedef struct {
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   unkn16;
    float   unkn17;
    long    FFFF2;
    long    FFFF3;
} ZakoSpawn;

//------------------------------------------------
// [cEmSetter] Boss Spawn
typedef struct {
    long    IBsignature;
    float   Pos_X<bgcolor=0x00ff00,name="Position    X">;
    float   Pos_Y<bgcolor=0x00ff00,name="Position    Y">;
    float   Pos_Z<bgcolor=0x00ff00,name="Position    Z">;
    float   unkn<bgcolor=0x00ff00>;
    long    cmd<bgcolor=0x800080,name="rSetObject">;
    if (cmd != 0){string path<bgcolor=0x800080,name="Path">;}
} BossSpawn;

//------------------------------------------------
// [cEmSetter] Boss Trace
typedef struct {
    long    IBsignature;
    long    FFFF1;
    long    FFFF2<bgcolor=0xff0000>;
    long    cmd<bgcolor=0x800080,name="rSetObject">;
    if (cmd != 0){string path<bgcolor=0x800080,name="Path">;}
} TraceSet;

//------------------------------------------------
// [cPlJumpPos] Spawn Coordinates
typedef struct {
    float x;
    float y;
    float z;
} PlVector;

//------------------------------------------------
// Player Spawn Data
typedef struct {
    uint64  ID;
    PlVector plv[15]<bgcolor=0x000AA00,read=ReadPlVector,name="Player Coordinates",optimize=false>;
} PlJumpPos;

//------------------------------------------------
//Read Strings
string ReadSpawn(Spawn& r) {
    string s;
    s = r.s;
    return s;
}

string ReadBool(dBool& r) {
    string s;
    SPrintf(s, "Value: %d", r.bool);
    return s;
}

string ReadInt32(dInt32& r) {
    string s;
    SPrintf(s, "Value: %d", r.value);
    return s;
}

string ReadClass(dClass& r) {
    string s;
    SPrintf(s, "Value: %d", r.value);
    return s;
}

string ReadFloat32(dFloat& r) {
    string s;
    SPrintf(s, "Value: %f", r.draw);
    return s;

}

string ReadVector4(dVector4& r) {
    string s;
    SPrintf(s, "X: %f \t Y: %f \t Z: %f", r.Pos_X, r.Pos_Y, r.Pos_Z);
    return s;
}

string ReadParam(Parameters& r) {
    string s;
    s = r.PRM;
    return s;
}

string ReadSix(Six& r) {
    string s;
    SPrintf(s, "%d %d %d", r.ID, r.unkn1, r.unkn2);
    return s;
}

string ReadUunkn(Uunkn& r) {
    string s;
    SPrintf(s, "%d %d %d %d", r.IDcount, r.unkn1, r.unkn2, r.unkn3);
    return s;
}

string ReadZako(ZakoSpawn& r) {
    string s;
    SPrintf(s, "Unkn: %d \t [X: %f \t Y: %f \t Z: %f]", r.unkn16, r.Pos_X, r.Pos_Y, r.Pos_Z);
    return s;
}

string ReadSetTrace(BossSpawn& r) {
    string s;
    SPrintf(s, "Spawn: %f \t [X: %f \t Y: %f \t Z: %f]", r.unkn, r.Pos_Z, r.Pos_Y, r.Pos_Z);
    return s;
}

string ReadFishConfig(FishConfig& f) {
    string s;
    string v;
    uint32  Fish;
    if (f.fID == 0) {
        Fish = f.fishID;
        v = "Regular";
    }
    else{
        Fish = f.fID;
        v = "Greater";
    }
    SPrintf(s, "Ver: " + v + "\t ID: %d \t Count: %d \t Rarity: %d", Fish, f.fCnt, f.rBool);
    return s; 
}

string ReadRarity(Rarity& r) {
    string i;
    string p;
    string s;
    SPrintf(s, "Unkn: %d \t Spawn Rate: %f", r.aCnt, r.rarity);
    return s;
}

string ReadPlVector(PlVector& r) {
    string s;
    SPrintf(s, "[X: %d \t Y: %d \t Z: %d]", r.x, r.y, r.z);
    return s;
}

//string ReadRoute(Route& r) {
//    string s;
//    SPrintf(s, "Action: %d \t A[X: %f \t Y: %f \t Z: %f] \t B[X: %f \t Y: %f \t Z: %f]", 
//            r.Action, r.aPos_X, r.aPos_Y, r.aPos_Z, r.bPos_X, r.bPos_Y, r.bPos_Z);
//    return s;
//}
//
//string ReadRepop(Repop& r) {
//    string s;
//    SPrintf(s, "[X: %f \t Y: %f \t Z: %f]", r.Pos_X, r.Pos_Y, r.Pos_Z);
//    return s;
//}
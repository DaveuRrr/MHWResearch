//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: 
//   Authors: Dave uRrr, AsteriskAmpersand
//   Version: 
//   Purpose: Adds all the mini structs needed for the bigger ones
//  Category: 
// File Mask: SOBJ.bt
//  ID Bytes: 
//   History: 
//      02-10-2021: 
//          Added a bunch of the DTI information on top of fixing
//          cEmSetter.
//------------------------------------------------

//------------------------------------------------
// Data Type Information
//------------------------------------------------
//------------------------------------------------
// Bool
typedef struct {
    byte    bool<bgcolor=0xff0000>;
} Bool; //Type 3

//------------------------------------------------
// Int32
typedef struct {
    int32   value<bgcolor=0xff0000>;
} Int32; //Type 4

//------------------------------------------------
// Float
typedef struct {
    float   value<bgcolor=0x00ff00>;
} Float; // Type 6

//------------------------------------------------
// Vector3 no Null
typedef struct {
    float x;
    float y;
    float z;
} Vector3;

//------------------------------------------------
// Vector4
typedef struct {
    float x;
    float y;
    float z;
    float w;
} Vector4; // Type 8

//------------------------------------------------
// Vector4
typedef struct {
    Vector4    v4[4]<read=ReadVector4,optimize=false>;
} Matrix44; // Type 9

//------------------------------------------------
// Class
typedef struct {
    byte    NUL0<hidden=true>;
    uint32  value<bgcolor=0xff0000,name="Value">;
    byte    NUL1<hidden=true>;
} Class; // Type 13

//------------------------------------------------
// Custom hash Load Files by Asterisk 
typedef struct {
    local string s;
    uint32 mEnumCRC<bgcolor=0x000000,format=hex>;
    if (mEnumCRC !=0) { 
        string path<bgcolor=0x80080>;
        s = path;
    }
} Custom;

//------------------------------------------------
// OddStruct
typedef struct {
    byte    SOH1;
    byte    unkn0[4];
    if(TypeName == "cAssetBasicSetObject") {byte    unkn4[28];}
    else {byte  unkn4[13];}
    long    EOT1;
} oStruct;

//------------------------------------------------
// NPC Camera
typedef struct {
    byte    Flag;
    uint16  NULL[3];
    Vector4 mPos<bgcolor=0x00FF00,read=ReadVector4>;
    Vector4 mAngle<bgcolor=0x00AA00,read=ReadVector4>;
    Vector4 mScale<bgcolor=0x006600,read=ReadVector4>;
    float   unkn[2];
} Camera;

//------------------------------------------------
// mCoordParam
//------------------------------------------------
typedef struct {
    uint32  dType<name="Data Type">;
    switch(dType) {
        case 3  : Bool         dbool<read=ReadBool>;        break;
        case 4  : Int32        dint32<read=ReadInt32>;       break;
        case 6  : Float        dfloatM<read=ReadFloat32>;   break;
        case 8  : Vector4      dvector4<read=ReadVector>;   break;
        case 9  : Matrix44     dmatrix44;                   break;
        case 13 : Class        dclass<read=ReadClass>;      break;
    }
    string  PRM<bgcolor=0x800080,name="Parameter">;
    uint32  DTypev<bgcolor=0xff0000,name="Data Type ID">;
    string  DTypes<bgcolor=0x800080,name="Data Type String">;
    uint32  class<bgcolor=0xff0000,name="Value/Class">;
    byte    SOH[9]<hidden=true>;
} Parameters;

//------------------------------------------------
// mCoordParam
//------------------------------------------------
typedef struct {
    uint32 count;
    Parameters parameter[count]<read=ReadParam,optimize=false>;
} mCoordParam;

//------------------------------------------------
// Gimmick
typedef struct {
    string  cmd;
    uint32  fCnt;
    float   unkn2[fCnt];
} GM;

//------------------------------------------------
// IsUseLikeArea
//------------------------------------------------
typedef struct {
    float   unkn0;
    byte    unkn1;
    float   range;
    float   height;
    Matrix44 AABB<bgcolor=0x00FFFF>;
    Vector4 mPos<read=ReadVector4,bgcolor=0x00FF00>;
} mShape;

//------------------------------------------------
// IsUseLikeArea
//------------------------------------------------
struct UseLikeArea(int use) {
    mShape VisibleArea;
    byte SOH;
    if (use == 1) { uint32 NULL; }
    else { uint64 NULL; }
};

//------------------------------------------------
// //nAnimal::InitSetData
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    Matrix44 mMat<bgcolor=0x00AAAA>;
    long    mEmAreaNo;
} InitSetData; //nAnimal::InitSetData

//------------------------------------------------
// //nAnimal::InitSetData
//------------------------------------------------
typedef struct {
    uint32 count;
    InitSetData initsetdata[count]<read=ReadInitSet,optimize=false>;
} mInitDataArray;

//------------------------------------------------
// nAnimal::cPoint
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32  mIndex;
    uint32  mAttr;
    Vector3 mPosition<bgcolor=0x00FF00,read=ReadVector3>;
    Vector3 mNormal<bgcolor=0x00FF00,read=ReadVector3>;
    int32   mEmAreaNo;
} cPoint; //nAnimal::cPoint

//------------------------------------------------
// nAnimal::cPoint
//------------------------------------------------
typedef struct {
    uint32 count;
    cPoint point[count]<read=ReadcPoint,optimize=false>;
} mPoints;

//------------------------------------------------
// nAnimal::RareSetData
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32  mTargetWeather;
    float   mProbability;
    byte    mStartTime;
    byte    mEndTime;
} RareSetData; //nAnimal::RareSetData

//------------------------------------------------
// nAnimal::RareSetData
//------------------------------------------------
typedef struct {
    uint32 count;
    RareSetData raresetdata[count]<read=ReadRarity,optimize=false>;
} mRareSetDataArray;

//------------------------------------------------
// nAnimal::SizeSetData
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32  mTargetWeather;
    float   mProbability;
    byte    mStartTime;
    byte    mEndTime;
    float   mSizeProbability[4];
} SizeSetData; //nAnimal::SizeSetData

//------------------------------------------------
// nAnimal::SizeSetData
//------------------------------------------------
typedef struct {
    uint32 count;
    SizeSetData sizesetdata[count]<optimize=false>;
} mSizeSetDataArray;

//------------------------------------------------
// cSetFishArea::cFishSetParam
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32  mAnimalID;
    uint32  mAnimalType;
    uint32  mAnimalNum;
    uint32  mSetVariation;
    byte    mIsRare;
    uint32  mIsRare1;
    if (mIsRare == 1) { mRareSetDataArray RareData; }
    if (mIsRare1 != 0 && mIsRare == 0) { mRareSetDataArray RareData; }
    uint32  Size;
    if (Size != 0) {mSizeSetDataArray SizeData; }
    byte    mIsUseLikeArea;
    if (mIsUseLikeArea != 0) {UseLikeArea useArea(mIsUseLikeArea);}
    Printf("mIsUseLikeArea %d ", mIsUseLikeArea);
} cFishSetParam; //cSetFishArea::cFishSetParam

//------------------------------------------------
// cSetFishArea::cFishSetParam
//------------------------------------------------
typedef struct {
    uint32 count;
    cFishSetParam FishSet[count]<read=ReadFishSet,optimize=false>;
} mFishSetParams;

//------------------------------------------------
// cLifeSimTargetDesireSetData
//------------------------------------------------
typedef struct {
    uint32 mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32 index;
    uint32 unkn;
} mTagSetData;

//------------------------------------------------
// cLifeSimTargetDesireSetData
//------------------------------------------------
typedef struct {
    uint32  mEnumCRC<bgcolor=0x000000,format=hex>;
    mTagSetData TagSet; //Needs review
    uint32  mAttr;
    int32   mStoryCheck;
} cLifeSimTargetDesireSetData; //AIFSM

//------------------------------------------------
// cLifeSimTargetDesireSetData
//------------------------------------------------
typedef struct {
    uint32 count;
    cLifeSimTargetDesireSetData lifesim[count]<read=ReadLSTDSD,optimize=false>;
} mDesireList;

//------------------------------------------------
// nSetLinker::cTypedTagForSetData Type:Repop
//------------------------------------------------
typedef struct {
    uint32  mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32  mTgtCrc;
    uint32  mTgtIndex;
    uint32  mTgtType;
    //uint32  unkn;
} cTypedTagForSetData; //nSetLinker::cTypedTagForSetData

//------------------------------------------------
// nSetLinker::cTypedTagForSetData Type:Repop
//------------------------------------------------
typedef struct {
    uint32 count;
    cTypedTagForSetData TypeTag[count]<optimize=false>;
} mRepopSetList;

//------------------------------------------------
// [cEmSetter] Loop Structs
typedef struct {
    uint32  group;
    float   unkn0;
    float   unkn1;
} TargetGroup;

//------------------------------------------------
// nEmGroup::MemberInfo
//------------------------------------------------
typedef struct {
    uint32 count;
    TargetGroup targetgroup[count]<read=ReadTargetGroup,optimize=false>;
} mTargetGroupIDList;

//------------------------------------------------
// nEmGroup::MemberInfo
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    uint32  mID<bgcolor=0xff0000>;
    Vector3 mPos<bgcolor=0x00FF00,read=ReadVector3>;
    Vector3 mAng<bgcolor=0x00AA00,read=ReadVector3>;
    float   mMulScale<bgcolor=0x00FF00>;
    byte    mStartFSM;
    Custom mprFSM;
    Custom mprMostionList;
    Custom mprThinkTableList;
    uint32  mSubID<bgcolor=0xff0000>; //Status / Variant
    string Tag0;
    string Tag1;
    string Tag2;
    string Tag3;
} MemberInfo; //nEmGroup::MemberInfo

//------------------------------------------------
// nEmGroup::MemberInfo
//------------------------------------------------
typedef struct {
    uint32 count;
    MemberInfo memberinfo[count]<optimize=false>;
} nEmGroupMemberInfo;

//------------------------------------------------
// [cEmSetter] Zako Spawn
//------------------------------------------------
typedef struct {
    Vector3 mPos<bgcolor=0x00FF00,read=ReadVector3>;
    float   unkn16;
    float   unkn17;
    long    FFFF2;
    long    FFFF3;
} ZakoSpawn;

//------------------------------------------------
// mProps possibe?
//------------------------------------------------
typedef struct {
    uint32 count;
    ZakoSpawn zako[count]<optimize=false>;
} mProps; //ZakoSpawn...

//------------------------------------------------
// cEmSetter::PosSetData
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    Vector3 mPos<bgcolor=0x00AA00>;
    float   mProb<bgcolor=0x00FF00>;
    Custom  mpTraceLogSetRes;
} PosSetData;

//------------------------------------------------
// cEmSetter::PosSetData
//------------------------------------------------
typedef struct {
    uint32 count;
    PosSetData SetData[count]<read=ReadPosSetData,optimize=false>;
} mPosData;

//------------------------------------------------
// cEmSetter::OverrideTraceData Maybe?
//------------------------------------------------
typedef struct {
    long    mEnumCRC<bgcolor=0x000000,format=hex>;
    long    FFFF1;
    long    FFFF2<bgcolor=0xff0000>;
    Custom  mpTraceLogSetRes; 
} TraceData; // cEmSetter::OverrideTraceData Maybe?

//------------------------------------------------
// cEmSetter::OverrideTraceData Maybe?
//------------------------------------------------
typedef struct {
    uint32 count;
    TraceData tracedata[count]<optimize=false>;
} mOverrideTraceData;

//------------------------------------------------
//Read Strings
//------------------------------------------------
string ReadCustom(Custom& r) {
    string s;
    if (r.mEnumCRC != 0) {s = r.path;}
    return s;
}

string ReadBool(Bool& r) {
    string s;
    SPrintf(s, "Value: %d", r.bool);
    return s;
}

string ReadInt32(Int32& r) {
    string s;
    SPrintf(s, "Value: %d", r.value);
    return s;
}

string ReadClass(Class& r) {
    string s;
    SPrintf(s, "Value: %d", r.value);
    return s;
}

string ReadFloat32(Float& r) {
    string s;
    SPrintf(s, "Value: %f", r.draw);
    return s;

}

string ReadVector3(Vector3& r) {
    string s;
    SPrintf(s, "X: %f \t Y: %f \t Z: %f", r.x, r.y, r.z);
    return s;
}

string ReadVector4(Vector4& r) {
    string s;
    SPrintf(s, "X: %f \t Y: %f \t Z: %f \t W: %f", r.x, r.y, r.z, r.w);
    return s;
}

string ReadParam(Parameters& r) {
    string s;
    s = r.PRM;
    return s;
}

string ReadTargetGroup(TargetGroup& r) {
    string s;
    SPrintf(s, "ID: %d \t %d \t %d", r.group, r.unkn0, r.unkn1);
    return s;
}

string ReadLSTDSD(cLifeSimTargetDesireSetData& r) {
    string s;
    SPrintf(s, "Tag: %d \t %d \t Attr: %d \t StoryCheck: %d", r.TagSet.index, r.TagSet.unkn, r.mAttr, r.mStoryCheck);
    return s;
} //cLifeSimTargetDesireSetData

string ReadPosSetData(PosSetData& r) {
    string s;
    SPrintf(s, "[X: %f \t Y: %f \t Z: %f] \t Prob: %d \t Path: %s", r.mPos.x, r.mPos.y, r.mPos.z, r.mProb, r.mpTraceLogSetRes.s);
    return s;
}

string ReadZako(ZakoSpawn& r) {
    string s;
    SPrintf(s, "[%d %d] \t [X: %f \t Y: %f \t Z: %f]", r.unkn16, r.unkn17, r.mPos.x, r.mPos.y, r.mPos.z);
    return s;
}

string ReadInitSet(InitSetData& r) {
    string s;
    SPrintf(s, "Matrix[4] [X: %f \t Y: %f \t Z: %f]", r.mMat.v4[3].x, r.mMat.v4[3].y, r.mMat.v4[3].z);
    return s;
}

string ReadcPoint(cPoint& r) {
    string s;
    SPrintf(s, "IX: %d \t Attr: %d \t [X: %f \t Y: %f \t Z: %f] EmArea: %d", 
        r.mIndex, r.mAttr, r.mPosition.x, r.mPosition.y, r.mPosition.z, r.mEmAreaNo);
    return s;
}

string ReadFishSet(cFishSetParam& r) {
    string s;
    SPrintf(s, "ID: %d \t Type: %d \t Count: %d \t Rarity: %d \t IsLikeArea: %d", 
        r.mAnimalID, r.mAnimalType, r.mAnimalNum, r.mIsRare, r.mIsUseLikeArea);
    return s; 
}

string ReadRarity(RareSetData& r) {
    string s;
    SPrintf(s, "Weather: %d \t Rate: %f \t S: %d \t E: %d", r.mTargetWeather, r.mProbability, r.mStartTime, r.mEndTime);
    return s;
}